#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <tuple>
#include <cmath>

using namespace std;

static int N;
static long D[91][2];
  
// 1 -> 1
// 2 -> 10 
// 3 -> 101, 100
//  -> 3 = 1의 경우의수  + 1
// 4 -> 1000, 1001, 1010
//  -> 4 = 2의 경우의 수 + 1의 경우의 수 + 1
// 5 -> 1010 0, 10101, 1000 0, 1000 1, 1001 0, 
 // - > 5 = 3의 경우의 수 + 2의 경우의 수 + 1의 경우의 수 + 1
// 6 -> 1010 00, 1010 01, 1010 10, 1001 01, 1001 00, 1000 10, 1000 01, 1000 00
//        1000 00, 1000 01, 1000 10, 1001 00, 1001 01, 1010 00, 1010 01, 1010 10 
// 6 -> 4 , 3, 2, 1 + 1의 경우의 수 


// 길이 1에서 끝이 1인 이친수의 개수
// 길이 1에서 끝이 0인 이친수의 개수

// (1, 0) 1                                                
// (0, 1) 10 
// (1, 1) 100, 101 
// (1, 2) 1000, 1001, 1010 
// (2, 3) 10000, 10001, 10010, 10100, 10101 
// (3, 5) 1000 00, 1000 01, 1000 10, 1001 00, 1001 01, 1010 00, 1010 01, 1010 10
int main()
{
	ios::sync_with_stdio(false);
	cin.tie(NULL); 
	cout.tie(NULL);

	cin >> N;

	D[1][1] = 1; 
	D[1][0] = 0;  
	 
	for (int i = 2; i <= N; i++)
	{
		long next0 = D[i - 1][1] + D[i - 1][0];
		long next1 = D[i - 1][0];
		D[i][1] = next1;
		D[i][0] = next0;
	}

	 
	cout << D[N][0] + D[N][1];

}
 